/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query Departments {\n    departments {\n      deptCode\n      name\n      shortName\n    }\n  }\n": types.DepartmentsDocument,
    "\n  mutation Login($password: String!, $loginId: String!) {\n    login(password: $password, id: $loginId) {\n      student {\n        studentId\n        residencyStatus\n        residency {\n          isCurrentMessManager\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n        }\n      }\n      token\n      authority {\n        authorityId\n        role\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  query Applications($page : Float!, $filters: FilterInput, $sort : SortInput, $search : SearchInput) {\n    applications(page : $page, filters: $filters, sort : $sort, search : $search) {\n      applications {\n        applicationId\n        createdAt\n        lastUpdate\n        status\n        student {\n          student9DigitId\n          batch {\n            year\n          }\n          department {\n            shortName\n          }\n          levelTerm {\n            label\n          }\n          name\n          residencyStatus\n          studentId\n        }\n        newApplication {\n          newApplicationId\n        }\n        seatChangeApplication {\n          seatChangeApplicationId\n        }\n        tempApplication {\n          applicationId\n        }\n      }\n      count\n    }\n  }\n": types.ApplicationsDocument,
    "\n  query Query {\n    applicationStatus{\n      status\n      select\n    }\n    applicationTypes\n    batches {\n      year\n    }\n    departments {\n      shortName\n    }\n    levelTerms {\n        label\n    }\n  }\n": types.QueryDocument,
    "\n  query Batches {\n    batches {\n      year\n    }\n  }\n": types.BatchesDocument,
    "\n  query ApplicationDetails($applicationId: Float!) {\n      applicationDetails(applicationId: $applicationId) {\n        applicationId\n        createdAt\n        lastUpdate\n        status\n        attachedFiles {\n          uploadedFile {\n            fileName\n            uploadedFileId\n          }\n        }\n        student {\n          student9DigitId\n          batch {\n            year\n          }\n          department {\n            shortName\n          }\n          levelTerm {\n            label\n          }\n          name\n          residencyStatus\n          studentId\n          residency {\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n              seatLabel\n            }\n          }\n          tempResidencyHistory {\n            from\n            to\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n          }\n        }\n        newApplication {\n          newApplicationId\n          questionnaire {\n            q1\n            q2\n            questionnaireId\n          }\n        }\n        tempApplication {\n          from\n          prefSeat {\n            room {\n              roomNo\n              floor {\n                floorNo\n                roomLabelLen\n              }\n            }\n            seatLabel\n          }\n          days\n        }\n        seatChangeApplication {\n          reason\n          seatChangeApplicationId\n          toSeat {\n            seatLabel\n            room {\n              floor {\n                floorNo\n                roomLabelLen\n              }\n              roomNo\n            }\n          }\n          toSeatId\n          applicationId\n          votes {\n            status\n            reason\n            student {\n              name\n              department {\n                shortName\n              }\n              batch {\n                year\n              }\n              levelTerm {\n                label\n              }\n            }\n          }\n        }\n      }\n   }\n   \n": types.ApplicationDetailsDocument,
    "\n  query SelfInfo {\n    selfInfo {\n      student {\n        studentId\n        residencyStatus\n        residency {\n          isCurrentMessManager\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n        }\n      }\n      authority {\n        authorityId\n        role\n      }\n      token\n    }\n  }\n": types.SelfInfoDocument,
    "\n  query Myapplications {\n  myapplications {\n    applicationId\n    createdAt\n    lastUpdate\n    status\n    student {\n      student9DigitId\n      batch {\n        year\n      }\n      department {\n        shortName\n      }\n      levelTerm {\n        label\n      }\n      name\n      residencyStatus\n      studentId\n    }\n    newApplication {\n      newApplicationId\n    }\n    seatChangeApplication {\n      seatChangeApplicationId\n    }\n    tempApplication {\n      applicationId\n    }\n  }\n}\n\n": types.MyapplicationsDocument,
    "\n    mutation NewSeatApplication($attachedFileIds: IntArray!, $q2: Boolean!, $q1: Boolean!) {\n         newSeatApplication(attachedFileIds: $attachedFileIds, q2: $q2, q1: $q1) {\n            application {\n                createdAt\n            }\n            applicationId\n        }\n    }\n": types.NewSeatApplicationDocument,
    "\n    mutation TempSeatApplication($from: String!, $days: Float!, $prefSeatId: Float!, $q2: Boolean!, $q1: Boolean!) {\n      tempSeatApplication(from: $from, days: $days, prefSeatId: $prefSeatId, q2: $q2, q1: $q1) {\n        applicationId\n        application {\n          createdAt\n          tempApplication {\n            days\n            applicationId\n          }\n        }\n      }\n    }\n": types.TempSeatApplicationDocument,
    "\n    mutation SeatChangeApplication($reason: String!, $seatId: Float!) {\n      seatChangeApplication(reason: $reason, seatId: $seatId) {\n        applicationId\n        seatChangeApplicationId\n        application {\n          createdAt\n          seatChangeApplication {\n            reason\n          }\n        }\n      }\n    }\n": types.SeatChangeApplicationDocument,
    "\n  query FreeFloors {\n    freeFloors {\n      floorId\n      floorNo\n    }\n  }\n": types.FreeFloorsDocument,
    "\n  query FreeRoomInFloor($floorNo: Float!) {\n    freeRoomInFloor(floorNo: $floorNo) {\n      roomNo\n      roomId\n    }\n  }\n": types.FreeRoomInFloorDocument,
    "\n  query FreeSeatInRoom($floorNo:Float!, $roomNo: Float!) {\n    freeSeatInRoom(floorNo:$floorNo,roomNo: $roomNo) {\n      seatId\n      seatLabel\n    }\n  }\n": types.FreeSeatInRoomDocument,
    "\n  query FreeSeatQuery {\n    freeSeat {\n      seatId\n      room {\n        roomNo\n        floor {\n          floorNo\n        }\n      }\n      seatLabel\n    }\n  }\n": types.FreeSeatQueryDocument,
    "\n\nmutation Mutation($seatId: Float!, $newApplicationId: Float!) {\n  approveNewApplication(seatId: $seatId, newApplicationId: $newApplicationId) {\n    residencyId\n  }\n}": types.MutationDocument,
    "\n    mutation ApproveTempSeatApplication($from: String!, $days: Float!, $seatId: Float!, $applicationId: Float!) {\n      approveTempSeatApplication(from: $from, days: $days, seatId: $seatId, applicationId: $applicationId) {\n        days\n        from\n        seat {\n          room {\n            roomNo\n            floor {\n              floorNo\n              roomLabelLen\n            }\n          }\n        }\n      }\n    }\n\n": types.ApproveTempSeatApplicationDocument,
    "\n    mutation ApproveSeatChangeApplication($seatId: Float!, $seatChangeApplicationId: Float!) {\n      approveSeatChangeApplication(seatId: $seatId, seatChangeApplicationId: $seatChangeApplicationId) {\n        seatId\n        student {\n          name\n        }\n      }\n    }\n\n": types.ApproveSeatChangeApplicationDocument,
    "\n  mutation RejectApplication($applicationId: Float!) {\n    rejectApplication(applicationId: $applicationId) {\n      applicationId\n    }\n  }\n": types.RejectApplicationDocument,
    "\n  query Notifications {\n    notifications {\n      notifications {\n        time\n        text\n        seen\n        notificationId\n        applicationId\n        voteId\n      }\n      unseenCount\n    }\n  }\n": types.NotificationsDocument,
    "\n   query GetMealPlans($to: String!, $from: String!) {\n  getMealPlans(to: $to, from: $from) {\n    mealPlanId\n    mealTime\n    day\n    mealTime\n    meal {\n      mealId\n      items {\n        itemId\n        name\n        photoId\n        type\n        photo {\n          file {\n            fileName\n          }\n        }\n      }\n    }\n    preferences {\n      item {\n        itemId\n        name\n        type\n      }\n      order\n    }\n    optedOut {\n      studentId\n    }\n    cupCount {\n      cupcount\n      itemId\n    }\n  }\n}\n\n": types.GetMealPlansDocument,
    "\n    mutation OptOut($mealPlanId: Float!) {\n      optOut(mealPlanId: $mealPlanId) {\n        mealPlanId\n        time\n        mealPlan {\n          day\n          mealTime\n        }\n        residencyId\n        residency {\n          studentId\n        }\n      }\n    }\n\n": types.OptOutDocument,
    "\n     mutation AddPreferences($preferences: PreferenceInput!, $mealPlanId: Float!) {\n      addPreferences(preferences: $preferences, mealPlanId: $mealPlanId) {\n        mealPlanId\n        order\n        student {\n          student9DigitId\n        }\n        itemId\n        item {\n          name\n          type\n        }\n        mealPlan {\n          day\n          mealId\n          mealTime\n        }\n      }\n    }\n\n": types.AddPreferencesDocument,
    "\n    query GetAnnouncements {\n      getAnnouncements {\n        announcementId\n        authorityId\n        createdAt\n        title\n        details\n        messManagerId\n        messManager {\n          messManagerId\n        }\n        authority {\n          role\n        }\n      }\n    }\n\n": types.GetAnnouncementsDocument,
    "\n  query Participants($mealTime: String!, $from: String!) {\n    participants(mealTime: $mealTime, from: $from) {\n      _count\n      mealPlan {\n        mealPlanId\n        day\n      }\n    }\n  }\n": types.ParticipantsDocument,
    "\nquery Absentees($take: Float!, $from: String!) {\n  absentees(take: $take, from: $from) {\n    _count\n    residency {\n      student {\n        student9DigitId\n      }\n    }\n  }\n}\n": types.AbsenteesDocument,
    "\nquery ExampleQuery($date: String!) {\n  ratings(date: $date) {\n    avg\n    type\n    feedback {\n      feedbackId\n      startMealPlan {\n        day\n      }\n      endMealPlan {\n        day\n      }\n    }\n  }\n}\n": types.ExampleQueryDocument,
    "\n  query OptOutQuery($mealTime: String!, $date: String!) {\n    optedOutStats(mealTime: $mealTime, date: $date) {\n      optedOut\n      total\n    }\n  }\n": types.OptOutQueryDocument,
    "\n  query MealPreferenceStats($mealTime: String!, $date: String!) {\n    mealPreferenceStats(mealTime: $mealTime, date: $date) {\n      count\n      order\n      item {\n        itemId\n        name\n        type\n      }\n    }\n  }\n": types.MealPreferenceStatsDocument,
    "\nquery PendingFeedbacks {\n  pendingFeedbacks {\n    startDate\n    startMealPlan {\n      day\n    }\n    endMealPlan {\n      day\n    }\n    feedbackId\n    messManager {\n      residency{\n        student {\n          name\n          levelTerm {\n            label\n          }\n          batch {\n            year\n          }\n        }\n      }\n    }\n  }\n}\n": types.PendingFeedbacksDocument,
    "\n  mutation PostFeedback($feedbackId: Float!, $ratings: IntArray!) {\n    postFeedback(feedbackId: $feedbackId, ratings: $ratings)\n  }\n": types.PostFeedbackDocument,
    "\nquery AssingedMessManagers {\n  assingedMessManagers {\n    from\n    residencyId\n    to\n    residency  {\n      student {\n      name\n      phone\n      email\n      levelTerm {\n        label\n      }\n      batch {\n        year\n      }\n      student9DigitId\n      }\n    }\n  }\n}\n": types.AssingedMessManagersDocument,
    "\n  query MessManagerAssignedTill {\n    messManagerAssignedTill\n  }\n": types.MessManagerAssignedTillDocument,
    "\n  mutation CreateCallMutation($to: String!, $from: String!) {\n    createCall(to: $to, from: $from) {\n      callId\n      createdAt\n      from\n      to\n    }\n  }\n": types.CreateCallMutationDocument,
    "\nquery PrevCallQuery {\n  prevCalls {\n    callId\n    createdAt\n    from\n    to\n    accepted\n    applicationsCount\n    applications {\n      appliedAt\n      applicationId\n      callId\n      residency {\n        messManagerTimes\n        from\n        isCurrentMessManager\n        residencyId\n        student {\n          batch {\n            year\n          }\n          name\n          levelTerm {\n            label\n          }\n          student9DigitId\n          department {\n            shortName\n          }\n        }\n      }\n    }\n  }\n}\n": types.PrevCallQueryDocument,
    "\nmutation ApproveMessManagerApplication($messManagerApplicationId: Float!) {\n  approveMessManagerApplication(messManagerApplicationId: $messManagerApplicationId) {\n    residencyId\n  }\n}\n": types.ApproveMessManagerApplicationDocument,
    "\nquery GetOldItems {\n  getOldItems {\n    itemId\n    name\n    type\n    photoId\n  }\n}\n": types.GetOldItemsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Departments {\n    departments {\n      deptCode\n      name\n      shortName\n    }\n  }\n"): (typeof documents)["\n  query Departments {\n    departments {\n      deptCode\n      name\n      shortName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($password: String!, $loginId: String!) {\n    login(password: $password, id: $loginId) {\n      student {\n        studentId\n        residencyStatus\n        residency {\n          isCurrentMessManager\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n        }\n      }\n      token\n      authority {\n        authorityId\n        role\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($password: String!, $loginId: String!) {\n    login(password: $password, id: $loginId) {\n      student {\n        studentId\n        residencyStatus\n        residency {\n          isCurrentMessManager\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n        }\n      }\n      token\n      authority {\n        authorityId\n        role\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Applications($page : Float!, $filters: FilterInput, $sort : SortInput, $search : SearchInput) {\n    applications(page : $page, filters: $filters, sort : $sort, search : $search) {\n      applications {\n        applicationId\n        createdAt\n        lastUpdate\n        status\n        student {\n          student9DigitId\n          batch {\n            year\n          }\n          department {\n            shortName\n          }\n          levelTerm {\n            label\n          }\n          name\n          residencyStatus\n          studentId\n        }\n        newApplication {\n          newApplicationId\n        }\n        seatChangeApplication {\n          seatChangeApplicationId\n        }\n        tempApplication {\n          applicationId\n        }\n      }\n      count\n    }\n  }\n"): (typeof documents)["\n  query Applications($page : Float!, $filters: FilterInput, $sort : SortInput, $search : SearchInput) {\n    applications(page : $page, filters: $filters, sort : $sort, search : $search) {\n      applications {\n        applicationId\n        createdAt\n        lastUpdate\n        status\n        student {\n          student9DigitId\n          batch {\n            year\n          }\n          department {\n            shortName\n          }\n          levelTerm {\n            label\n          }\n          name\n          residencyStatus\n          studentId\n        }\n        newApplication {\n          newApplicationId\n        }\n        seatChangeApplication {\n          seatChangeApplicationId\n        }\n        tempApplication {\n          applicationId\n        }\n      }\n      count\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Query {\n    applicationStatus{\n      status\n      select\n    }\n    applicationTypes\n    batches {\n      year\n    }\n    departments {\n      shortName\n    }\n    levelTerms {\n        label\n    }\n  }\n"): (typeof documents)["\n  query Query {\n    applicationStatus{\n      status\n      select\n    }\n    applicationTypes\n    batches {\n      year\n    }\n    departments {\n      shortName\n    }\n    levelTerms {\n        label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Batches {\n    batches {\n      year\n    }\n  }\n"): (typeof documents)["\n  query Batches {\n    batches {\n      year\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ApplicationDetails($applicationId: Float!) {\n      applicationDetails(applicationId: $applicationId) {\n        applicationId\n        createdAt\n        lastUpdate\n        status\n        attachedFiles {\n          uploadedFile {\n            fileName\n            uploadedFileId\n          }\n        }\n        student {\n          student9DigitId\n          batch {\n            year\n          }\n          department {\n            shortName\n          }\n          levelTerm {\n            label\n          }\n          name\n          residencyStatus\n          studentId\n          residency {\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n              seatLabel\n            }\n          }\n          tempResidencyHistory {\n            from\n            to\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n          }\n        }\n        newApplication {\n          newApplicationId\n          questionnaire {\n            q1\n            q2\n            questionnaireId\n          }\n        }\n        tempApplication {\n          from\n          prefSeat {\n            room {\n              roomNo\n              floor {\n                floorNo\n                roomLabelLen\n              }\n            }\n            seatLabel\n          }\n          days\n        }\n        seatChangeApplication {\n          reason\n          seatChangeApplicationId\n          toSeat {\n            seatLabel\n            room {\n              floor {\n                floorNo\n                roomLabelLen\n              }\n              roomNo\n            }\n          }\n          toSeatId\n          applicationId\n          votes {\n            status\n            reason\n            student {\n              name\n              department {\n                shortName\n              }\n              batch {\n                year\n              }\n              levelTerm {\n                label\n              }\n            }\n          }\n        }\n      }\n   }\n   \n"): (typeof documents)["\n  query ApplicationDetails($applicationId: Float!) {\n      applicationDetails(applicationId: $applicationId) {\n        applicationId\n        createdAt\n        lastUpdate\n        status\n        attachedFiles {\n          uploadedFile {\n            fileName\n            uploadedFileId\n          }\n        }\n        student {\n          student9DigitId\n          batch {\n            year\n          }\n          department {\n            shortName\n          }\n          levelTerm {\n            label\n          }\n          name\n          residencyStatus\n          studentId\n          residency {\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n              seatLabel\n            }\n          }\n          tempResidencyHistory {\n            from\n            to\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n          }\n        }\n        newApplication {\n          newApplicationId\n          questionnaire {\n            q1\n            q2\n            questionnaireId\n          }\n        }\n        tempApplication {\n          from\n          prefSeat {\n            room {\n              roomNo\n              floor {\n                floorNo\n                roomLabelLen\n              }\n            }\n            seatLabel\n          }\n          days\n        }\n        seatChangeApplication {\n          reason\n          seatChangeApplicationId\n          toSeat {\n            seatLabel\n            room {\n              floor {\n                floorNo\n                roomLabelLen\n              }\n              roomNo\n            }\n          }\n          toSeatId\n          applicationId\n          votes {\n            status\n            reason\n            student {\n              name\n              department {\n                shortName\n              }\n              batch {\n                year\n              }\n              levelTerm {\n                label\n              }\n            }\n          }\n        }\n      }\n   }\n   \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SelfInfo {\n    selfInfo {\n      student {\n        studentId\n        residencyStatus\n        residency {\n          isCurrentMessManager\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n        }\n      }\n      authority {\n        authorityId\n        role\n      }\n      token\n    }\n  }\n"): (typeof documents)["\n  query SelfInfo {\n    selfInfo {\n      student {\n        studentId\n        residencyStatus\n        residency {\n          isCurrentMessManager\n            seat {\n              room {\n                roomNo\n                floor {\n                  floorNo\n                  roomLabelLen\n                }\n              }\n            }\n        }\n      }\n      authority {\n        authorityId\n        role\n      }\n      token\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Myapplications {\n  myapplications {\n    applicationId\n    createdAt\n    lastUpdate\n    status\n    student {\n      student9DigitId\n      batch {\n        year\n      }\n      department {\n        shortName\n      }\n      levelTerm {\n        label\n      }\n      name\n      residencyStatus\n      studentId\n    }\n    newApplication {\n      newApplicationId\n    }\n    seatChangeApplication {\n      seatChangeApplicationId\n    }\n    tempApplication {\n      applicationId\n    }\n  }\n}\n\n"): (typeof documents)["\n  query Myapplications {\n  myapplications {\n    applicationId\n    createdAt\n    lastUpdate\n    status\n    student {\n      student9DigitId\n      batch {\n        year\n      }\n      department {\n        shortName\n      }\n      levelTerm {\n        label\n      }\n      name\n      residencyStatus\n      studentId\n    }\n    newApplication {\n      newApplicationId\n    }\n    seatChangeApplication {\n      seatChangeApplicationId\n    }\n    tempApplication {\n      applicationId\n    }\n  }\n}\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation NewSeatApplication($attachedFileIds: IntArray!, $q2: Boolean!, $q1: Boolean!) {\n         newSeatApplication(attachedFileIds: $attachedFileIds, q2: $q2, q1: $q1) {\n            application {\n                createdAt\n            }\n            applicationId\n        }\n    }\n"): (typeof documents)["\n    mutation NewSeatApplication($attachedFileIds: IntArray!, $q2: Boolean!, $q1: Boolean!) {\n         newSeatApplication(attachedFileIds: $attachedFileIds, q2: $q2, q1: $q1) {\n            application {\n                createdAt\n            }\n            applicationId\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation TempSeatApplication($from: String!, $days: Float!, $prefSeatId: Float!, $q2: Boolean!, $q1: Boolean!) {\n      tempSeatApplication(from: $from, days: $days, prefSeatId: $prefSeatId, q2: $q2, q1: $q1) {\n        applicationId\n        application {\n          createdAt\n          tempApplication {\n            days\n            applicationId\n          }\n        }\n      }\n    }\n"): (typeof documents)["\n    mutation TempSeatApplication($from: String!, $days: Float!, $prefSeatId: Float!, $q2: Boolean!, $q1: Boolean!) {\n      tempSeatApplication(from: $from, days: $days, prefSeatId: $prefSeatId, q2: $q2, q1: $q1) {\n        applicationId\n        application {\n          createdAt\n          tempApplication {\n            days\n            applicationId\n          }\n        }\n      }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation SeatChangeApplication($reason: String!, $seatId: Float!) {\n      seatChangeApplication(reason: $reason, seatId: $seatId) {\n        applicationId\n        seatChangeApplicationId\n        application {\n          createdAt\n          seatChangeApplication {\n            reason\n          }\n        }\n      }\n    }\n"): (typeof documents)["\n    mutation SeatChangeApplication($reason: String!, $seatId: Float!) {\n      seatChangeApplication(reason: $reason, seatId: $seatId) {\n        applicationId\n        seatChangeApplicationId\n        application {\n          createdAt\n          seatChangeApplication {\n            reason\n          }\n        }\n      }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FreeFloors {\n    freeFloors {\n      floorId\n      floorNo\n    }\n  }\n"): (typeof documents)["\n  query FreeFloors {\n    freeFloors {\n      floorId\n      floorNo\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FreeRoomInFloor($floorNo: Float!) {\n    freeRoomInFloor(floorNo: $floorNo) {\n      roomNo\n      roomId\n    }\n  }\n"): (typeof documents)["\n  query FreeRoomInFloor($floorNo: Float!) {\n    freeRoomInFloor(floorNo: $floorNo) {\n      roomNo\n      roomId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FreeSeatInRoom($floorNo:Float!, $roomNo: Float!) {\n    freeSeatInRoom(floorNo:$floorNo,roomNo: $roomNo) {\n      seatId\n      seatLabel\n    }\n  }\n"): (typeof documents)["\n  query FreeSeatInRoom($floorNo:Float!, $roomNo: Float!) {\n    freeSeatInRoom(floorNo:$floorNo,roomNo: $roomNo) {\n      seatId\n      seatLabel\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FreeSeatQuery {\n    freeSeat {\n      seatId\n      room {\n        roomNo\n        floor {\n          floorNo\n        }\n      }\n      seatLabel\n    }\n  }\n"): (typeof documents)["\n  query FreeSeatQuery {\n    freeSeat {\n      seatId\n      room {\n        roomNo\n        floor {\n          floorNo\n        }\n      }\n      seatLabel\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\nmutation Mutation($seatId: Float!, $newApplicationId: Float!) {\n  approveNewApplication(seatId: $seatId, newApplicationId: $newApplicationId) {\n    residencyId\n  }\n}"): (typeof documents)["\n\nmutation Mutation($seatId: Float!, $newApplicationId: Float!) {\n  approveNewApplication(seatId: $seatId, newApplicationId: $newApplicationId) {\n    residencyId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ApproveTempSeatApplication($from: String!, $days: Float!, $seatId: Float!, $applicationId: Float!) {\n      approveTempSeatApplication(from: $from, days: $days, seatId: $seatId, applicationId: $applicationId) {\n        days\n        from\n        seat {\n          room {\n            roomNo\n            floor {\n              floorNo\n              roomLabelLen\n            }\n          }\n        }\n      }\n    }\n\n"): (typeof documents)["\n    mutation ApproveTempSeatApplication($from: String!, $days: Float!, $seatId: Float!, $applicationId: Float!) {\n      approveTempSeatApplication(from: $from, days: $days, seatId: $seatId, applicationId: $applicationId) {\n        days\n        from\n        seat {\n          room {\n            roomNo\n            floor {\n              floorNo\n              roomLabelLen\n            }\n          }\n        }\n      }\n    }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ApproveSeatChangeApplication($seatId: Float!, $seatChangeApplicationId: Float!) {\n      approveSeatChangeApplication(seatId: $seatId, seatChangeApplicationId: $seatChangeApplicationId) {\n        seatId\n        student {\n          name\n        }\n      }\n    }\n\n"): (typeof documents)["\n    mutation ApproveSeatChangeApplication($seatId: Float!, $seatChangeApplicationId: Float!) {\n      approveSeatChangeApplication(seatId: $seatId, seatChangeApplicationId: $seatChangeApplicationId) {\n        seatId\n        student {\n          name\n        }\n      }\n    }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectApplication($applicationId: Float!) {\n    rejectApplication(applicationId: $applicationId) {\n      applicationId\n    }\n  }\n"): (typeof documents)["\n  mutation RejectApplication($applicationId: Float!) {\n    rejectApplication(applicationId: $applicationId) {\n      applicationId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Notifications {\n    notifications {\n      notifications {\n        time\n        text\n        seen\n        notificationId\n        applicationId\n        voteId\n      }\n      unseenCount\n    }\n  }\n"): (typeof documents)["\n  query Notifications {\n    notifications {\n      notifications {\n        time\n        text\n        seen\n        notificationId\n        applicationId\n        voteId\n      }\n      unseenCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n   query GetMealPlans($to: String!, $from: String!) {\n  getMealPlans(to: $to, from: $from) {\n    mealPlanId\n    mealTime\n    day\n    mealTime\n    meal {\n      mealId\n      items {\n        itemId\n        name\n        photoId\n        type\n        photo {\n          file {\n            fileName\n          }\n        }\n      }\n    }\n    preferences {\n      item {\n        itemId\n        name\n        type\n      }\n      order\n    }\n    optedOut {\n      studentId\n    }\n    cupCount {\n      cupcount\n      itemId\n    }\n  }\n}\n\n"): (typeof documents)["\n   query GetMealPlans($to: String!, $from: String!) {\n  getMealPlans(to: $to, from: $from) {\n    mealPlanId\n    mealTime\n    day\n    mealTime\n    meal {\n      mealId\n      items {\n        itemId\n        name\n        photoId\n        type\n        photo {\n          file {\n            fileName\n          }\n        }\n      }\n    }\n    preferences {\n      item {\n        itemId\n        name\n        type\n      }\n      order\n    }\n    optedOut {\n      studentId\n    }\n    cupCount {\n      cupcount\n      itemId\n    }\n  }\n}\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation OptOut($mealPlanId: Float!) {\n      optOut(mealPlanId: $mealPlanId) {\n        mealPlanId\n        time\n        mealPlan {\n          day\n          mealTime\n        }\n        residencyId\n        residency {\n          studentId\n        }\n      }\n    }\n\n"): (typeof documents)["\n    mutation OptOut($mealPlanId: Float!) {\n      optOut(mealPlanId: $mealPlanId) {\n        mealPlanId\n        time\n        mealPlan {\n          day\n          mealTime\n        }\n        residencyId\n        residency {\n          studentId\n        }\n      }\n    }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n     mutation AddPreferences($preferences: PreferenceInput!, $mealPlanId: Float!) {\n      addPreferences(preferences: $preferences, mealPlanId: $mealPlanId) {\n        mealPlanId\n        order\n        student {\n          student9DigitId\n        }\n        itemId\n        item {\n          name\n          type\n        }\n        mealPlan {\n          day\n          mealId\n          mealTime\n        }\n      }\n    }\n\n"): (typeof documents)["\n     mutation AddPreferences($preferences: PreferenceInput!, $mealPlanId: Float!) {\n      addPreferences(preferences: $preferences, mealPlanId: $mealPlanId) {\n        mealPlanId\n        order\n        student {\n          student9DigitId\n        }\n        itemId\n        item {\n          name\n          type\n        }\n        mealPlan {\n          day\n          mealId\n          mealTime\n        }\n      }\n    }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAnnouncements {\n      getAnnouncements {\n        announcementId\n        authorityId\n        createdAt\n        title\n        details\n        messManagerId\n        messManager {\n          messManagerId\n        }\n        authority {\n          role\n        }\n      }\n    }\n\n"): (typeof documents)["\n    query GetAnnouncements {\n      getAnnouncements {\n        announcementId\n        authorityId\n        createdAt\n        title\n        details\n        messManagerId\n        messManager {\n          messManagerId\n        }\n        authority {\n          role\n        }\n      }\n    }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Participants($mealTime: String!, $from: String!) {\n    participants(mealTime: $mealTime, from: $from) {\n      _count\n      mealPlan {\n        mealPlanId\n        day\n      }\n    }\n  }\n"): (typeof documents)["\n  query Participants($mealTime: String!, $from: String!) {\n    participants(mealTime: $mealTime, from: $from) {\n      _count\n      mealPlan {\n        mealPlanId\n        day\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Absentees($take: Float!, $from: String!) {\n  absentees(take: $take, from: $from) {\n    _count\n    residency {\n      student {\n        student9DigitId\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Absentees($take: Float!, $from: String!) {\n  absentees(take: $take, from: $from) {\n    _count\n    residency {\n      student {\n        student9DigitId\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery ExampleQuery($date: String!) {\n  ratings(date: $date) {\n    avg\n    type\n    feedback {\n      feedbackId\n      startMealPlan {\n        day\n      }\n      endMealPlan {\n        day\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery ExampleQuery($date: String!) {\n  ratings(date: $date) {\n    avg\n    type\n    feedback {\n      feedbackId\n      startMealPlan {\n        day\n      }\n      endMealPlan {\n        day\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OptOutQuery($mealTime: String!, $date: String!) {\n    optedOutStats(mealTime: $mealTime, date: $date) {\n      optedOut\n      total\n    }\n  }\n"): (typeof documents)["\n  query OptOutQuery($mealTime: String!, $date: String!) {\n    optedOutStats(mealTime: $mealTime, date: $date) {\n      optedOut\n      total\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MealPreferenceStats($mealTime: String!, $date: String!) {\n    mealPreferenceStats(mealTime: $mealTime, date: $date) {\n      count\n      order\n      item {\n        itemId\n        name\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  query MealPreferenceStats($mealTime: String!, $date: String!) {\n    mealPreferenceStats(mealTime: $mealTime, date: $date) {\n      count\n      order\n      item {\n        itemId\n        name\n        type\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PendingFeedbacks {\n  pendingFeedbacks {\n    startDate\n    startMealPlan {\n      day\n    }\n    endMealPlan {\n      day\n    }\n    feedbackId\n    messManager {\n      residency{\n        student {\n          name\n          levelTerm {\n            label\n          }\n          batch {\n            year\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery PendingFeedbacks {\n  pendingFeedbacks {\n    startDate\n    startMealPlan {\n      day\n    }\n    endMealPlan {\n      day\n    }\n    feedbackId\n    messManager {\n      residency{\n        student {\n          name\n          levelTerm {\n            label\n          }\n          batch {\n            year\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PostFeedback($feedbackId: Float!, $ratings: IntArray!) {\n    postFeedback(feedbackId: $feedbackId, ratings: $ratings)\n  }\n"): (typeof documents)["\n  mutation PostFeedback($feedbackId: Float!, $ratings: IntArray!) {\n    postFeedback(feedbackId: $feedbackId, ratings: $ratings)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery AssingedMessManagers {\n  assingedMessManagers {\n    from\n    residencyId\n    to\n    residency  {\n      student {\n      name\n      phone\n      email\n      levelTerm {\n        label\n      }\n      batch {\n        year\n      }\n      student9DigitId\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery AssingedMessManagers {\n  assingedMessManagers {\n    from\n    residencyId\n    to\n    residency  {\n      student {\n      name\n      phone\n      email\n      levelTerm {\n        label\n      }\n      batch {\n        year\n      }\n      student9DigitId\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MessManagerAssignedTill {\n    messManagerAssignedTill\n  }\n"): (typeof documents)["\n  query MessManagerAssignedTill {\n    messManagerAssignedTill\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCallMutation($to: String!, $from: String!) {\n    createCall(to: $to, from: $from) {\n      callId\n      createdAt\n      from\n      to\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCallMutation($to: String!, $from: String!) {\n    createCall(to: $to, from: $from) {\n      callId\n      createdAt\n      from\n      to\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery PrevCallQuery {\n  prevCalls {\n    callId\n    createdAt\n    from\n    to\n    accepted\n    applicationsCount\n    applications {\n      appliedAt\n      applicationId\n      callId\n      residency {\n        messManagerTimes\n        from\n        isCurrentMessManager\n        residencyId\n        student {\n          batch {\n            year\n          }\n          name\n          levelTerm {\n            label\n          }\n          student9DigitId\n          department {\n            shortName\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery PrevCallQuery {\n  prevCalls {\n    callId\n    createdAt\n    from\n    to\n    accepted\n    applicationsCount\n    applications {\n      appliedAt\n      applicationId\n      callId\n      residency {\n        messManagerTimes\n        from\n        isCurrentMessManager\n        residencyId\n        student {\n          batch {\n            year\n          }\n          name\n          levelTerm {\n            label\n          }\n          student9DigitId\n          department {\n            shortName\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation ApproveMessManagerApplication($messManagerApplicationId: Float!) {\n  approveMessManagerApplication(messManagerApplicationId: $messManagerApplicationId) {\n    residencyId\n  }\n}\n"): (typeof documents)["\nmutation ApproveMessManagerApplication($messManagerApplicationId: Float!) {\n  approveMessManagerApplication(messManagerApplicationId: $messManagerApplicationId) {\n    residencyId\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetOldItems {\n  getOldItems {\n    itemId\n    name\n    type\n    photoId\n  }\n}\n"): (typeof documents)["\nquery GetOldItems {\n  getOldItems {\n    itemId\n    name\n    type\n    photoId\n  }\n}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;